import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

def generate_points(num_points, size=100):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ size x size"""
    x_coords = np.random.uniform(0, size, num_points)
    y_coords = np.random.uniform(0, size, num_points)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ x (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
    indices = np.argsort(x_coords)
    return x_coords[indices], y_coords[indices]

def distance(x_coords, y_coords, i, j):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ i –∏ j"""
    return np.sqrt((x_coords[i] - x_coords[j]) ** 2 + (y_coords[i] - y_coords[j]) ** 2)

def prob_exp(d, a):
    """–§–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ e^(-a * d)"""
    return np.exp(-a * d)

def prob_inverse(d, b):
    """–§–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ 1 / d^b"""
    return 1 / (d ** b) if d > 1 else 1  # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

def build_tree(num_points, method, param, size=100):
    """–°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ (a –∏–ª–∏ b)"""
    x_coords, y_coords = generate_points(num_points, size)
    G = nx.DiGraph()
    G.add_nodes_from(range(num_points))
    
    connected = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω
    connected.add(0)  # –ö–æ—Ä–µ–Ω—å ‚Äî —Å–∞–º–∞—è –ª–µ–≤–∞—è —Ç–æ—á–∫–∞

    for j in range(1, num_points):  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é —Ç–æ—á–∫—É
        best_parent = None
        best_prob = 0
        
        for i in range(j):  # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–æ—á–µ–∫
            d = distance(x_coords, y_coords, i, j)
            if 1 <= d <= 10:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                if method == "a":
                    p = prob_exp(d, param)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ e^(-a*d)
                elif method == "b":
                    p = prob_inverse(d, param)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 1 / d^b
                
                if p > best_prob:
                    best_parent = i
                    best_prob = p
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ, –µ—Å–ª–∏ –Ω–∞—à—ë–ª—Å—è —Ä–æ–¥–∏—Ç–µ–ª—å
        if best_parent is not None:
            G.add_edge(best_parent, j)
            connected.add(j)
    
    # üî• –ù–æ–≤—ã–π –±–ª–æ–∫: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –æ–¥–Ω–æ –¥–µ—Ä–µ–≤–æ
    components = list(nx.weakly_connected_components(G))
    if len(components) > 1:  # –ï—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ—Å–≤—è–∑–Ω—ã–π
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã {len(components)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö...")
        main_component = components[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        for component in components[1:]:
            nearest = min(main_component, key=lambda i: min(distance(x_coords, y_coords, i, j) for j in component))
            farthest = min(component, key=lambda j: distance(x_coords, y_coords, nearest, j))
            G.add_edge(nearest, farthest)
            main_component |= component  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞

    return G, x_coords, y_coords

def plot_tree(G, x_coords, y_coords, title):
    """–†–∏—Å—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    plt.figure(figsize=(12, 12))
    pos = {i: (x_coords[i], y_coords[i]) for i in range(len(x_coords))}
    nx.draw(G, pos, with_labels=True, node_size=50, font_size=6, edge_color="gray", arrows=True)
    plt.suptitle(title, fontsize=14, fontweight='bold')  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    plt.show()

# –ó–∞–ø—É—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
num_points = 300  # –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ 500 –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

# –í–∞—Ä–∏–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ a
for a in [0.1, 0.5, 1, 2, 5]:  # –û—Ç "—Å–∏–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π" –¥–æ "—Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö"
    G, x_coords, y_coords = build_tree(num_points, method="a", param=a)
    plot_tree(G, x_coords, y_coords, f"–î–µ—Ä–µ–≤–æ –ø—Ä–∏ a = {a}")

# –í–∞—Ä–∏–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ b
for b in [1, 2, 3, 4]:  # –ß–µ–º –±–æ–ª—å—à–µ b, —Ç–µ–º —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–µ–µ –¥–µ—Ä–µ–≤–æ
    G, x_coords, y_coords = build_tree(num_points, method="b", param=b)
    plot_tree(G, x_coords, y_coords, f"–î–µ—Ä–µ–≤–æ –ø—Ä–∏ b = {b}")
